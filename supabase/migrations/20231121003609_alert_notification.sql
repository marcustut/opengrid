create type "public"."comparator" as enum ('eq', 'neq', 'lt', 'lte', 'gt', 'gte');

create table "public"."alert" (
    "id" bigint generated by default as identity not null,
    "name" text,
    "description" text,
    "threshold" double precision not null,
    "user_id" uuid not null,
    "alert_type" text not null,
    "comparator" comparator not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "active" boolean not null default false,
    "message" text
);


alter table "public"."alert" enable row level security;

create table "public"."alert_type" (
    "name" text not null,
    "description" text not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "default_threshold" double precision,
    "default_comparator" comparator
);


alter table "public"."alert_type" enable row level security;

create table "public"."user_notification" (
    "id" uuid not null default gen_random_uuid(),
    "type" text not null,
    "content" text not null,
    "user_id" uuid not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "read" boolean not null default false
);


alter table "public"."user_notification" enable row level security;

CREATE UNIQUE INDEX alert_pkey ON public.alert USING btree (id);

CREATE UNIQUE INDEX alert_type_name_key ON public.alert_type USING btree (name);

CREATE UNIQUE INDEX alert_type_pkey ON public.alert_type USING btree (name);

CREATE UNIQUE INDEX notification_pkey ON public.user_notification USING btree (id);

alter table "public"."alert" add constraint "alert_pkey" PRIMARY KEY using index "alert_pkey";

alter table "public"."alert_type" add constraint "alert_type_pkey" PRIMARY KEY using index "alert_type_pkey";

alter table "public"."user_notification" add constraint "notification_pkey" PRIMARY KEY using index "notification_pkey";

alter table "public"."alert" add constraint "alert_alert_type_fkey" FOREIGN KEY (alert_type) REFERENCES alert_type(name) ON UPDATE CASCADE ON DELETE RESTRICT not valid;

alter table "public"."alert" validate constraint "alert_alert_type_fkey";

alter table "public"."alert" add constraint "alert_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."alert" validate constraint "alert_user_id_fkey";

alter table "public"."alert_type" add constraint "alert_type_name_key" UNIQUE using index "alert_type_name_key";

alter table "public"."user_notification" add constraint "user_notification_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."user_notification" validate constraint "user_notification_user_id_fkey";

create policy "Enable delete for users based on user_id"
on "public"."alert"
as permissive
for delete
to public
using ((auth.uid() = user_id));


create policy "Enable insert for users based on user_id"
on "public"."alert"
as permissive
for insert
to public
with check ((auth.uid() = user_id));


create policy "Enable select for users based on user_id"
on "public"."alert"
as permissive
for select
to public
using ((auth.uid() = user_id));


create policy "Enable read access for all users"
on "public"."alert_type"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."user_notification"
as permissive
for select
to public
using ((auth.uid() = user_id));


create policy "Enable update for users based on user_id"
on "public"."user_notification"
as permissive
for update
to public
using ((auth.uid() = user_id))
with check ((auth.uid() = user_id));




